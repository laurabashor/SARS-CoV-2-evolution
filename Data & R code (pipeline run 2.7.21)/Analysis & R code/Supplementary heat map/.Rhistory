df <- df%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret",
grepl("P", dataset_ID) ~"Vero cells"))
#add some things to compare piN and piS
df <- df %>%
mutate(piN_div_piS=(piN/piS)) %>% #allows you to see if its >1, =1, or <1
mutate(piN_greater=ifelse((piN>piS), TRUE, FALSE)) %>% #allows you to see if piN>piS, even if one of them is 0
mutate(piS_greater=ifelse((piS>piN), TRUE, FALSE)) #I don't think we actually have any data where piN=piS exactly, but just to be safe
df_pop_sum  <- df_pop_sum %>%
mutate(piN_greater=ifelse((piN>piS), TRUE, FALSE)) #allows you to see if piN>piS, even if one of them is 0
#difference between piN and piS at a population level
t.test(x=df_pop_sum$piN, y=df_pop_sum$piS,paired=TRUE)
#to break it down by species, have to get rid of the ferret because there aren't multiple values of piN and piS
#dogs are significant, hamsters are significant
population_summary <- df_pop_sum %>%
filter(species!="Ferret") %>%
pivot_longer(!c("dataset_ID","species","pi"),
names_to="variable", values_to="value") %>%
group_by(species, variable) %>%
summarise(value=list(value)) %>%
spread(variable, value)  %>%
group_by(species) %>%
mutate(p_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$p.value,
t_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$statistic)
product_summary <- df %>%
select(dataset_ID, gene_product, species, piN, piS) %>%
pivot_longer(!c("dataset_ID","gene_product", "species"),
names_to="variable", values_to="value") %>%
group_by(gene_product, variable) %>%
summarise(value=list(value)) %>%
spread(variable, value) %>%
group_by(gene_product) %>%
mutate(p_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$p.value,
t_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$statistic)
product_summary %>%
filter(p_value<=0.05)
#(3) I'm not sure this is visualize-able, too many zeros
df_long <- df %>%
select(dataset_ID, gene_product, species, piN, piS) %>%
pivot_longer(!c("dataset_ID","gene_product", "species"),
names_to="variable", values_to="value") %>%
filter(gene_product %in% c("S","orf1ab", "M"))
ggplot(df_long,aes(x=gene_product, y=value)) +
geom_boxplot(aes(color = variable), width = 0.5, size = 0.4,
position = position_dodge(0.8)) +
geom_dotplot(aes(fill = variable, color = variable),
binaxis='y', stackdir='center', dotsize = 0.8,
position = position_dodge(0.8))+
#scale_x_discrete(labels=c("Cat","Dog","Hamster","Vero cells"))+
labs(fill="Nucleotide Diversity", color="Nucleotide Diversity")+
theme_classic()+
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
df2 <- df %>%
filter(gene_product %in% c("S","orf1ab", "M"))
View(df2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", size=2)
setwd("~/Dropbox/SARS-CoV-2-evolution/Results (pipeline run 2.7.21)/Analysis & R code/Variant summaries (Fig X)")
#big plot
library(tidyverse)
library(ggrepel)
library(ggpubr)
library(RColorBrewer)
#read data
df <- read.csv("variant_table_all_means.csv")
length <- read.csv("gene_lengths.csv")
#read data
df <- read.csv("variant_summary_processed.csv")
length <- read.csv("gene_lengths.csv")
df2 <- df %>%
pivot_longer(!c(reference_sequence, position, gene, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret",
grepl("P", dataset_ID) ~"Vero")) %>%
na.omit(df2)
#count the number of distinct variants to get richness
richness <- df2 %>%
group_by(dataset_ID) %>%
summarise(n=n_distinct(variant)) %>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret",
grepl("P", dataset_ID) ~"Vero"))
p1 <- ggplot(richness, aes(x=species, y=n)) +
geom_dotplot(aes(x=species, y=n, fill=species), show.legend=FALSE, binaxis="y", stackdir="center", stroke=FALSE) +
stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.2) +
stat_summary(fun=mean, geom="crossbar", width=0.4) +
stat_compare_means(method = "anova", label.x.npc = "middle", label.y.npc="top")+
labs(x="Species",y="Number of Unique Variants") +
theme_classic()+
theme(axis.text=element_text(size=14), axis.title.x=element_blank(), axis.title.y=element_text(size=16))
compare_means(n~species, data=richness) #no significant difference between any of the animals doing t-tests
aov <- aov(n~species, data=richness)
summary(aov)
TukeyHSD(aov)
cohorts <- richness %>%
filter(species=="Cats") %>%
mutate(cohort = ifelse(dataset_ID %in% c("Cat_1", "Cat_5","Cat_6"),2,1))
#clean up gene names by pulling out orf information into another column, keeping all the nsps in the gene column
df <- df %>% separate(gene, c("cds","orf"), sep=",",remove=FALSE, fill="left")  #we don't really need the resulting cds column
df$gene <- str_replace(df$gene, ",orf1ab", "")
df$gene <- str_replace(df$gene, ",S", "")
#count every single observation of all variants by CDS
df.long <- df %>%
pivot_longer(!c(reference_sequence, position, gene, orf,cds, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")
gene_count_all <- df.long %>%
count(gene)
View(gene_count_all)
#count every single observation of all variants by CDS
df.long <- df %>%
pivot_longer(!c(reference_sequence, position, gene, orf,cds, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")
count_all <- df.long %>%
count(gene)
#add length of cds to data frame
count_all <- merge(count_all, length)
count_all <- count_all %>%
mutate(proportion_of_genome=length/29903) %>%
mutate(proportion_of_variants=(n/sum(n))) %>%
mutate(magnitude=(proportion_of_variants-proportion_of_genome))
View(count_all)
p2 <- ggplot(gene_count_all, aes(x=proportion_of_genome, y=proportion_of_variants, label=gene))+
geom_point()+
geom_text_repel(aes(label=gene))+
geom_smooth(method="lm")+
labs(x="Gene length as a proportion of genome length", y="Proportion of variants")+
theme_classic()+
theme(legend.position = "none",axis.text = element_text(size=14),
axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16))
df.cats <- df %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("C"))
df.dogs <- df %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("D"))
df.hamsters <- df %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("H"))
#use a function to delete any rows in which there are NAs for all cats
delete.na <- function(df.cats, n=0) {
df.cats[rowSums(is.na(df.cats)) <= n,]
}
df.cats <- delete.na(df.cats,5) #5 is max NAs allowed for 6 cats
# #do it for dogs
delete.na.dogs <- function(df.dogs, n=0) {
df.dogs[rowSums(is.na(df.dogs)) <= n,]
}
df.dogs <- delete.na.dogs(df.dogs, 2) #2 is max NAs allowed for 3 dogs
#do it for hamsters
delete.na.ham <- function(df.hamsters, n=0) {
df.hamsters[rowSums(is.na(df.hamsters)) <= n,]
}
df.hamsters <- delete.na.ham(df.hamsters, 2) #2 is max NAs allowed for 3 hamsters
#now count variants and proportion of variants by #individuals of each species
cat.count <- df.cats %>%
mutate(number_of_cats=(6-rowSums(is.na(.)))) %>%
count(number_of_cats) %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(number_of_variants=n) %>%
select(-n)%>%
mutate(species="cat") %>%
mutate(number_of_individuals=number_of_cats) %>%
select(-number_of_cats)
#dogs
dog.count <- df.dogs%>%
mutate(number_of_dogs=(3-rowSums(is.na(.))))%>%
count(number_of_dogs) %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(number_of_variants=n) %>%
select(-n) %>%
mutate(species="dog") %>%
mutate(number_of_individuals=number_of_dogs)%>%
select(-number_of_dogs)
#hamsters
ham.count <- df.hamsters%>%
mutate(number_of_hams=(3-rowSums(is.na(.))))%>%
count(number_of_hams) %>%
mutate(percentage=(n/sum(n)*100)) %>%
mutate(number_of_variants=n) %>%
select(-n)%>%
mutate(species="hamster") %>%
mutate(number_of_individuals=number_of_hams) %>%
select(-number_of_hams)
#stick them together
all <- full_join(ham.count, cat.count)
all <- full_join(all,dog.count)
###do this all again, but with only variants that weren't detected in the inoculum
#first filter data frame so that you only keep rows where there was NA for all three passages of the inoculum
df.filtered <-
df %>%
filter_at(vars(starts_with("Passage")), all_vars(is.na(.)))
#start with breaking down variants by number of individual animals for each species
df.cats2 <- df.filtered %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("C"))
df.dogs2 <- df.filtered %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("D"))
df.hamsters2 <- df.filtered %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("H"))
#use a function to delete any rows in which there are NAs for all cats
delete.na2 <- function(df.cats2, n=0) {
df.cats2[rowSums(is.na(df.cats2)) <= n,]
}
df.cats2 <- delete.na2(df.cats2,5) #5 is max NAs allowed for 6 cats
# #do it for dogs
delete.na.dogs2 <- function(df.dogs2, n=0) {
df.dogs2[rowSums(is.na(df.dogs2)) <= n,]
}
df.dogs2 <- delete.na.dogs2(df.dogs2, 2) #2 is max NAs allowed for 3 dogs
#do it for hamsters
delete.na.ham2 <- function(df.hamsters2, n=0) {
df.hamsters2[rowSums(is.na(df.hamsters2)) <= n,]
}
df.hamsters2 <- delete.na.ham2(df.hamsters2, 2) #2 is max NAs allowed for 3 hamsters
#now count variants and proportion of variants by #individuals of each species
cat.count2 <- df.cats2 %>%
mutate(number_of_cats=(6-rowSums(is.na(.)))) %>%
count(number_of_cats) %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(number_of_variants=n) %>%
select(-n)%>%
mutate(species="cat") %>%
mutate(number_of_individuals=number_of_cats) %>%
select(-number_of_cats)
#dogs
dog.count2 <- df.dogs2%>%
mutate(number_of_dogs=(3-rowSums(is.na(.))))%>%
count(number_of_dogs) %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(number_of_variants=n) %>%
select(-n)%>%
mutate(species="dog") %>%
mutate(number_of_individuals=number_of_dogs)%>%
select(-number_of_dogs)
#hamsters
ham.count2 <- df.hamsters2%>%
mutate(number_of_hams=(3-rowSums(is.na(.))))%>%
count(number_of_hams) %>%
mutate(percentage=(n/sum(n)*100)) %>%
mutate(number_of_variants=n) %>%
select(-n)%>%
mutate(species="hamster") %>%
mutate(number_of_individuals=number_of_hams) %>%
select(-number_of_hams)
all2 <- full_join(ham.count2, cat.count2)
all2 <- full_join(all2,dog.count2)
pA <- ggplot(all, aes(x=species, y=percentage, fill=factor(number_of_individuals))) +
geom_bar(stat="identity")+
scale_fill_brewer(palette="Paired")+
theme_classic()+
scale_x_discrete(labels=c("Cat", "Dog", "Hamster"))+
coord_flip()+
labs(y="Percentage of Variants", fill="Number of Individuals")+
theme(text=element_text(size=16),legend.position="bottom",
axis.title.y=element_blank())
pB <- ggplot(all2, aes(x=species, y=percentage, fill=factor(number_of_individuals))) +
geom_bar(stat="identity")+
scale_fill_brewer(palette="Paired")+
theme_classic()+
scale_x_discrete(labels=c("Cat", "Dog", "Hamster"))+
labs(y="Percentage of Variants", fill="Number of Individuals")+
coord_flip()+
theme(text=element_text(size=16),
axis.title.y=element_blank(), legend.position="none")
p3 <- ggarrange(pA, pB, ncol=1, nrow=2, labels="AUTO")
df2 <- df2 %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3")
number_of_species <- df2 %>%
group_by(variant) %>%
count(species) %>%
count(variant, name="number_of_species") %>%
#now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
group_by(number_of_species) %>%
tally() %>%
mutate(percentage=(n/sum(n)*100)) %>%
mutate(type="all")
df3 <- df.filtered %>%
pivot_longer(!c(reference_sequence, position, gene,cds,orf, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")%>%
mutate(Animal = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3") %>%
na.omit(df3)
number_of_species2 <- df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species") %>% #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
group_by(number_of_species) %>%
tally() %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(type="not_in_inoc")
number_of_species <- full_join(number_of_species, number_of_species2)
ggplot(number_of_species, aes(x=type, y=percentage,
fill=factor(number_of_species))) +
geom_bar(stat="identity", width=0.5)+
scale_fill_manual(values=c("#33a02c" ,"#b2df8a" , "#6a3d9a","#cab2d6"))+
scale_x_discrete(labels=c("All variants", "Variants not in\nthe inoculum"))+
theme_classic()+
coord_flip()+
labs(fill="Number of Species",y="Percentage of Variants")+
theme(text=element_text(size=14), axis.title=element_text(size=16),
axis.title.y=element_blank(), axis.text.x=element_text(size=14))
#NOTE: this plot is only for variants not detected in the inoculum
p4 <- ggplot(number_of_species2, aes(x=number_of_species, y=n,
fill=factor(number_of_species))) +
geom_bar(stat="identity")+
theme_classic()+
labs(x= "Number of Species", y="Number of Variants")+
theme(axis.title=element_text(size=16),
axis.text=element_text(size=14), legend.position="none")
#pdf("Variant_summary_plot.pdf")
ggarrange(p1,p2,p3,p4, ncol=2, nrow=2)
count_all <- count_all %>%
mutate(proportion_of_genome=length/29903) %>%
mutate(proportion_of_variants=(n/sum(n)))
View(count_all)
p2 <- ggplot(count_all, aes(x=proportion_of_genome, y=proportion_of_variants, label=gene))+
geom_point()+
geom_text_repel(aes(label=gene))+
geom_smooth(method="lm")+
labs(x="Gene length as a proportion of genome length", y="Proportion of variants")+
theme_classic()+
theme(legend.position = "none",axis.text = element_text(size=14),
axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16))
#pdf("Variant_summary_plot.pdf")
ggarrange(p1,p2,p3,p4, ncol=2, nrow=2)
View(number_of_species2)
View(number_of_species)
View(df3)
View(df.filtered)
df3 <- df.filtered %>%
pivot_longer(!c(reference_sequence, position, gene,cds,orf, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")%>%
mutate(Animal = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3")
View(df3)
df3 <- df.filtered %>%
pivot_longer(!c(reference_sequence, position, gene,cds,orf, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")%>%
mutate(Animal = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3") %>%
select(-cds)
View(df3)
number_of_species <- df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species") %>% #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
group_by(number_of_species) %>%
tally() %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(type="not_in_inoc")
View(number_of_species)
View(df3)
df3 %>%
group_by(variant)%>%
count(Animal)
df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species")  #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
df3 <- df.filtered %>%
pivot_longer(!c(reference_sequence, position, gene,cds,orf, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")%>%
mutate(Animal = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3") %>%
select(-cds)
View(df3)
df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species")  #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
df3 <- df.filtered %>%
pivot_longer(!c(reference_sequence, position, gene,cds,orf, indel,variant, reference_base, variant_base, effect), names_to= "dataset_ID", values_to ="frequency")%>%
mutate(Animal = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3") %>%
select(-cds)%>%
na.omit(df3)
df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species")  #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species") %>% #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
group_by(number_of_species) %>%
tally() %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(type="not_in_inoc")
number_of_species <- df3 %>%
group_by(variant)%>%
count(Animal) %>%
count(variant, name="number_of_species") %>% #now we have the count for how many variants are found in 1, 2, 3, or 4 animal species, we need to summarize it
group_by(number_of_species) %>%
tally() %>%
mutate(percentage=(n/sum(n)*100))%>%
mutate(type="not_in_inoc")
#NOTE: this plot is only for variants not detected in the inoculum
p4 <- ggplot(number_of_species, aes(x=number_of_species, y=n,
fill=factor(number_of_species))) +
geom_bar(stat="identity")+
theme_classic()+
labs(x= "Number of Species", y="Number of Variants")+
theme(axis.title=element_text(size=16),
axis.text=element_text(size=14), legend.position="none")
ggplot(number_of_species, aes(x=number_of_species, y=n,
fill=factor(number_of_species))) +
geom_bar(stat="identity")+
theme_classic()+
labs(x= "Number of Species", y="Number of Variants")+
theme(axis.title=element_text(size=16),
axis.text=element_text(size=14), legend.position="none")
#pdf("Variant_summary_plot.pdf")
ggarrange(p1,p2,p3,p4, ncol=2, nrow=2)
setwd("~/Dropbox/SARS-CoV-2-evolution/Results (pipeline run 2.7.21)/Analysis & R code/Supplementary heat map")
#load libraries
library(pheatmap)
library(dendextend)
library(openxlsx)
#start with data frame containing cleaned up variant table with combined replicates
df <- read.xlsx('variant_summary_2.7.21.xlsx')
#NAs to 0s for clustering purposes
df[is.na(df)] <- 0
View(df)
#get just frequency data into a matrix, leave out inoculums (the ferret would cluster with P3 for example, and other things could be thrown off)
mat <- as.matrix(df[,11:41])
row.names(mat) <- df$variant
#scale data to a distribution with mean 0 and SD as 1
mat_scale <- scale(mat)
pheatmap(mat, fontsize_row = 5)
#heatmap where you only cluster based on animals (columns) is the same
pheatmap(mat, cluster_rows = FALSE, fontsize_row = 5)
pheatmap(mat_scale, fontsize_row = 5)
#default clustering
t.mat <- t(mat)
clust <- hclust(dist(t.mat), method="complete")
# pdf(file="animal_dendrogram.pdf")
as.dendrogram(clust) %>%
plot(horiz=TRUE)
# pdf(file="animal_dendrogram.pdf")
as.dendrogram(clust) %>%
plot()
# pdf(file="animal_dendrogram.pdf")
as.dendrogram(clust) %>%
plot(horiz=TRUE)
setwd("~/Dropbox/SARS-CoV-2-evolution/Results (pipeline run 2.7.21)/Analysis & R code/Supplementary heat map")
df <- read.csv("variant_summary_processed.csv")
#NAs to 0s for clustering purposes
df[is.na(df)] <- 0
#get just frequency data into a matrix, leave out inoculums (the ferret would cluster with P3 for example, and other things could be thrown off)
mat <- as.matrix(df[,11:41])
View(df)
#get just frequency data into a matrix, leave out inoculums (the ferret would cluster with P3 for example, and other things could be thrown off)
#mat <- as.matrix(df[,11:41])
mat <- as.matrix(df[,9:24])
row.names(mat) <- df$variant
# pdf(file="big_heatmap.pdf")
pheatmap(mat, fontsize_row = 5)
#scale data to a distribution with mean 0 and SD as 1
mat_scale <- scale(mat)
#default heatmap with scaling (looks pretty much the same)
# pdf(file="heatmap_scaled.pdf")
pheatmap(mat_scale, fontsize_row = 5)
#default heatmap with scaling (looks pretty much the same)
# pdf(file="heatmap_scaled.pdf")
pheatmap(mat_scale, fontsize_row = 5)
#default clustering, also doesn't cluster by species, but arrangement does seem a little different
t.mat <- t(mat)
clust <- hclust(dist(t.mat), method="complete")
# pdf(file="animal_dendrogram.pdf")
as.dendrogram(clust) %>%
plot(horiz=TRUE)
#default heatmap with scaling (looks pretty much the same)
pdf(file="heatmap_scaled.pdf")
pheatmap(mat_scale, fontsize_row = 5)
dev.off()
pdf(file="big_heatmap.pdf")
pheatmap(mat, fontsize_row = 5)
dev.off()
pdf(file="clustered_dendrogram.pdf")
as.dendrogram(clust) %>%
plot(horiz=TRUE)
dev.off()
