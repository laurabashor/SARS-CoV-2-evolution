setwd("~/Dropbox/SARS-CoV-2-evolution/Results (pipeline run 2.7.21)/Analysis & R code/Selection analyses (Fig X)")
#packages
library(tidyverse)
library(ggpubr)
#read in data
df <- read.csv("prod_results.csv")
df_pop_sum <- read.csv("pi_summary.csv")
#clean up data
#get rid of file name strings
df$dataset_ID <- gsub("vcfs_1.25.21/","",df$dataset_ID)
df$dataset_ID <- gsub("_R.vcf","",df$dataset_ID)
df$dataset_ID <- gsub(".vcf","",df$dataset_ID)
#make a species category
df <- df%>%
#make a species category
df <- df%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret") %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3"))
#make a species category
df <- df%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret") %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3"))
#read in data
df <- read.csv("prod_results.csv")
#clean up data
#get rid of file name strings
df$dataset_ID <- gsub("vcfs_1.25.21/","",df$dataset_ID)
df$dataset_ID <- gsub("_R.vcf","",df$dataset_ID)
df$dataset_ID <- gsub(".vcf","",df$dataset_ID)
#make a species category
df <- df%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret") %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3"))
df <- read.csv("prod_results.csv")
df_pop_sum <- read.csv("pi_summary.csv")
#clean up data
#get rid of file name strings
df$dataset_ID <- gsub("vcfs_1.25.21/","",df$dataset_ID)
df$dataset_ID <- gsub("_R.vcf","",df$dataset_ID)
df$dataset_ID <- gsub(".vcf","",df$dataset_ID)
#make a species category
df <- df%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3"))
df <- read.csv("prod_results.csv")
df_pop_sum <- read.csv("pi_summary.csv")
#clean up data
#get rid of file name strings
df$dataset_ID <- gsub("vcfs_1.25.21/","",df$dataset_ID)
df$dataset_ID <- gsub("_R.vcf","",df$dataset_ID)
df$dataset_ID <- gsub(".vcf","",df$dataset_ID)
df <- read.csv("prod_results.csv")
df_pop_sum <- read.csv("pi_summary.csv")
#clean up data
#get rid of file name strings
df$dataset_ID <- gsub("vcfs_1.25.21/","",df$dataset_ID)
df$dataset_ID <- gsub("_R.vcf","",df$dataset_ID)
df$dataset_ID <- gsub(".vcf","",df$dataset_ID)
#make a species category
df <- df%>%
mutate(species = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret")) %>%
filter(dataset_ID != "Passage_1") %>%
filter(dataset_ID != "Passage_2") %>%
filter(dataset_ID != "Passage_3")
View(df)
#add some things to compare piN and piS
df <- df %>%
mutate(piN_div_piS=(piN/piS)) %>% #allows you to see if its >1, =1, or <1
mutate(piN_greater=ifelse((piN>piS), TRUE, FALSE)) %>% #allows you to see if piN>piS, even if one of them is 0
mutate(piS_greater=ifelse((piS>piN), TRUE, FALSE)) #I don't think we actually have any data where piN=piS exactly, but just to be safe
df_pop_sum  <- df_pop_sum %>%
mutate(piN_greater=ifelse((piN>piS), TRUE, FALSE)) #allows you to see if piN>piS, even if one of them is 0
View(df_pop_sum)
#do the same for df_pop_sum, but also get rid of vero cells for these analyses
df_pop_sum  <- df_pop_sum %>%
mutate(piN_greater=ifelse((piN>piS), TRUE, FALSE)) %>%
filter(species != "Vero cells")
View(df_pop_sum)
#difference between piN and piS at a population level
t.test(x=df_pop_sum$piN, y=df_pop_sum$piS,paired=TRUE)
#to break it down by species, have to get rid of the ferret because there aren't multiple values of piN and piS
#dogs are significant, hamsters are significant
population_summary <- df_pop_sum %>%
filter(species!="Ferret") %>%
pivot_longer(!c("dataset_ID","species","pi"),
names_to="variable", values_to="value") %>%
group_by(species, variable) %>%
summarise(value=list(value)) %>%
spread(variable, value)  %>%
group_by(species) %>%
mutate(p_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$p.value,
t_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$statistic)
View(df_pop_sum)
View(population_summary)
product_summary <- df %>%
select(dataset_ID, gene_product, species, piN, piS) %>%
pivot_longer(!c("dataset_ID","gene_product", "species"),
names_to="variable", values_to="value") %>%
group_by(gene_product, variable) %>%
summarise(value=list(value)) %>%
spread(variable, value) %>%
group_by(gene_product) %>%
mutate(p_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$p.value,
t_value = t.test(unlist(piN), unlist(piS),paired=TRUE)$statistic)
product_summary %>%
filter(p_value<=0.05) #when you take all of the data together, M, orf1ab, and S show significant
ggpaired(df_pop_sum, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg", xlab=FALSE, ylab=FALSE, legend="none")+
stat_compare_means(paired = TRUE, method="t.test",vjust=1, hjust=-1)
plot1 <- ggpaired(df_pop_sum, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg", xlab=FALSE, ylab=FALSE, legend="none")+
stat_compare_means(paired = TRUE, method="t.test",vjust=1, hjust=-1)
ggpaired(df_pop_sum, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(species))+
stat_compare_means(method="t.test", size=2)
plot2<- ggpaired(df_pop_sum, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(species))+
stat_compare_means(method="t.test", size=2)
ggarrange(plot1, plot2, ncol=1, nrow=2)
pdf("selection_population_level.pdf", onefile=F)
ggarrange(plot1, plot2, ncol=1, nrow=2)
dev.off()
df2 <- df %>%
filter(gene_product %in% c("S","orf1ab", "M"))
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
plot2<- ggpaired(df_pop_sum, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(species))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
plot3 <- ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
pdf("selection_protein_level.pdf")
plot3
dev.off()
pdf("selection_protein_level.pdf")
plot3
dev.off()
ggarrange(plot1, plot2, ncol=1, nrow=2, labels="AUTO")
pdf("selection_population_level.pdf", onefile=F)
ggarrange(plot1, plot2, ncol=1, nrow=2, labels="AUTO")
dev.off()
pdf("selection_protein_level.pdf", width=11, height=9)
plot3
dev.off()
plot3
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", size=4)+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", size=6)+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", size=16)+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", params=list(size=2))+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", font.label=list(size=4))+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", font.label=list(size=6))+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none", font.label=list(size=14, face="plain"))+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
ggpaired(df2, cond1 = "piN", cond2 = "piS",
color = "condition", line.color = "gray", line.size = 0.4,
palette="npg",xlab=FALSE, ylab=FALSE, legend="none")+
facet_grid(cols=vars(gene_product))+
stat_compare_means(method="t.test", paired=TRUE, size=2)
pdf("selection_protein_level.pdf", width=8, height=6)
plot3
dev.off()
#load in cleaned data with replicates combined
df <- read.csv("variant_summary_processed.csv")
setwd("~/Dropbox/SARS-CoV-2-evolution/Results (pipeline run 2.7.21)/Analysis & R code/TC reversion (Fig 1)")
#load in cleaned data with replicates combined
df <- read.csv("variant_summary_processed.csv")
#NAs back to 0s for plotting
df[is.na(df)] <- 0
##want show the reversion of these variants in vivo for all the animal species
#pull out just TC mutations that went to fixation
df2 <- df %>%
filter(variant %in% c("D135E", "D215H", "R685H", "T7I","S194T"))
#make data long and skinny for plotting, rename value as frequency
#get a new column for the species/passage
#get the order right for passages
#change frequency to a percentage
df2 <- df2 %>%
pivot_longer(!c(reference_sequence, position, gene, indel,variant, reference_base, variant_base, effect),
names_to= "dataset_ID", values_to ="frequency") %>%
mutate(passage = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret",
grepl("_1", dataset_ID) ~"P1",
grepl("_2", dataset_ID) ~"P2",
grepl("_3", dataset_ID) ~"P3")) %>%
mutate(passage = fct_relevel(passage, "P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret")) %>%
mutate(percentage = (frequency*100))
#get the labels to say both the variant and cds
labels <- c("D135E (nsp12)", "D215H (Spike)", "R685H (Spike)", "S194T (Nucleocapsid)","T7I (Membrane)")
names(labels) <- c("D135E", "D215H", "R685H", "S194T", "T7I")
#plot it
ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_bw()+
theme(text = element_text(size=12, family="sans"), strip.text.x=element_text(size=14), axis.title=element_text(size=14)) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
#plot it
ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_classic()+
theme(text = element_text(size=12, family="sans"), strip.text.x=element_text(size=14), axis.title=element_text(size=14)) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
#plot it
ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_bw()+
theme(text = element_text(size=12, family="sans"),
strip.text.x=element_text(size=14),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
#plot it
p <- ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_bw()+
theme(text = element_text(size=12, family="sans"),
strip.text.x=element_text(size=14),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
print(p)
pdf(file="TC_variant_reversion.pdf", width=12, height=10)
p
dev.off()
setwd("~/Dropbox/SARS-CoV-2-evolution/Results (pipeline run 2.7.21)/Analysis & R code/TC reversion (Fig 1)")
#load in cleaned data with replicates combined
df <- read.csv("variant_summary_processed.csv")
#NAs back to 0s for plotting
df[is.na(df)] <- 0
##want show the reversion of these variants in vivo for all the animal species
#pull out just TC mutations that went to fixation
df2 <- df %>%
filter(variant %in% c("D135E", "D215H", "R685H", "T7I","S194T"))
#make data long and skinny for plotting, rename value as frequency
#get a new column for the species/passage
#get the order right for passages
#change frequency to a percentage
df2 <- df2 %>%
pivot_longer(!c(reference_sequence, position, gene, indel,variant, reference_base, variant_base, effect),
names_to= "dataset_ID", values_to ="frequency") %>%
mutate(passage = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret",
grepl("_1", dataset_ID) ~"P1",
grepl("_2", dataset_ID) ~"P2",
grepl("_3", dataset_ID) ~"P3")) %>%
mutate(passage = fct_relevel(passage, "P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret")) %>%
mutate(percentage = (frequency*100))
#get the labels to say both the variant and cds
labels <- c("D135E (nsp12)", "D215H (Spike)", "R685H (Spike)", "S194T (Nucleocapsid)","T7I (Membrane)")
names(labels) <- c("D135E", "D215H", "R685H", "S194T", "T7I")
#plot it
p <- ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_bw()+
theme(text = element_text(size=12, family="sans"),
strip.text.x=element_text(size=14),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
print(p)
#load in cleaned data with replicates combined
df <- read.csv("variant_summary_processed.csv")
#NAs back to 0s for plotting
df[is.na(df)] <- 0
##want show the reversion of these variants in vivo for all the animal species
#pull out just TC mutations that went to fixation
df2 <- df %>%
filter(variant %in% c("D135E", "D215H", "R685H", "T7I","S194T"))
#make data long and skinny for plotting, rename value as frequency
#get a new column for the species/passage
#get the order right for passages
#change frequency to a percentage
df2 <- df2 %>%
pivot_longer(!c(reference_sequence, position, gene, indel,variant, reference_base, variant_base, effect),
names_to= "dataset_ID", values_to ="frequency") %>%
mutate(passage = case_when(grepl("C", dataset_ID) ~ "Cats",
grepl("D", dataset_ID) ~"Dogs",
grepl("H", dataset_ID) ~"Hamsters",
grepl("F", dataset_ID) ~"Ferret",
grepl("_1", dataset_ID) ~"P1",
grepl("_2", dataset_ID) ~"P2",
grepl("_3", dataset_ID) ~"P3")) %>%
mutate(passage = fct_relevel(passage, "P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret")) %>%
mutate(percentage = (frequency*100))
#get the labels to say both the variant and cds
labels <- c("D135E (nsp12)", "D215H (Spike)", "R685H (Spike)", "S194T (Nucleocapsid)","T7I (Membrane)")
names(labels) <- c("D135E", "D215H", "R685H", "S194T", "T7I")
#plot it
ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_bw()+
theme(text = element_text(size=12, family="sans"),
strip.text.x=element_text(size=14),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
library(ggplot2)
#plot it
ggplot() +
geom_point(data=df2, aes(x=passage, y=percentage, group=variant), show.legend=FALSE) +
geom_line(data=df2 %>%
filter(passage == "P1"|passage == "P2"|passage == "P3"), aes(x=passage, y=percentage, group=variant), show.legend=FALSE)+
geom_boxplot(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage))+
geom_jitter(data=df2  %>%
filter(passage=="Cats"|passage=="Dogs"|passage=="Hamsters"|passage=="Ferret"), aes(x=passage, y=percentage, group=variant),position=position_jitter(w=0.1))+
#scale_colour_manual(values=colors)+
facet_wrap(vars(variant), labeller=labeller(variant=labels), scales='free_x') +
theme_bw()+
theme(text = element_text(size=12, family="sans"),
strip.text.x=element_text(size=14),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab ("Passage") +
ylab ("Variant Frequency (%)")
View(df2)
