#make data long and skinny for plotting, rename value as frequency
df3.long <- df3 %>%
pivot_longer(!c(variant), names_to= "dataset", values_to ="Frequency")
df3.long <- df3.long %>%
mutate(Passage = case_when(grepl("C", dataset) ~ "Cats",
grepl("D", dataset) ~"Dogs",
grepl("H", dataset) ~"Hamsters",
grepl("F", dataset) ~"Ferret",
grepl("P1", dataset) ~"P1",
grepl("P2", dataset) ~"P2",
grepl("P3", dataset) ~"P3"))
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), aes(x=Passage, y=Frequency), show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")))+
geom_point(data=df3.long %>%
filter(Passage=="Dogs"), aes(x=Passage, y=Frequency), color='red', position=position_jitter(w=0.1,h=0))+
geom_point(data=df3.long %>%
filter(Passage=="Cats"), aes(x=Passage, y=Frequency), color='blue', position=position_jitter(w=0.1,h=0))+
geom_point(data=df3.long %>%
filter(Passage=="Hamsters"), aes(x=Passage, y=Frequency), color='green', position=position_jitter(w=0.1,h=0))+
geom_point(data=df3.long %>%
filter(Passage=="Ferret"), aes(x=Passage, y=Frequency), color='purple', position=position_jitter(w=0.1,h=0))+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), aes(x=Passage, y=Frequency), show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")))+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant, color = Passage)) +
geom_point() +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")))+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant, color = Passage)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_fill_manual(values=Passage, breaks=c("P1","P2","P3"))
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_fill_manual(values=Passage))
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_fill_manual(values=Passage)
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
#plot
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), aes(x=Passage, y=Frequency), show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")))+
geom_point(data=df3.long %>%
filter(Passage=="Dogs"), aes(x=Passage, y=Frequency), color='red', position=position_jitter(w=0.1,h=0))+
geom_point(data=df3.long %>%
filter(Passage=="Cats"), aes(x=Passage, y=Frequency), color='blue', position=position_jitter(w=0.1,h=0))+
geom_point(data=df3.long %>%
filter(Passage=="Hamsters"), aes(x=Passage, y=Frequency), color='green', position=position_jitter(w=0.1,h=0))+
geom_point(data=df3.long %>%
filter(Passage=="Ferret"), aes(x=Passage, y=Frequency), color='purple', position=position_jitter(w=0.1,h=0))+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
colors <- c("P1"="black","P2"="black","P3"="black", "Cats"="red", "Dogs"="blue","Hamsters"="green","Ferret"="purple")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_fill_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_fill_manual(values=colors)+
facet_wrap(vars(variant)) +
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_fill_manual(values=colors)+
facet_wrap(vars(variant)) +
theme(bw, text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colors_manual(values=colors)+
facet_wrap(vars(variant)) +
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(Passage, values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
#plot
pdf(file="TC_variants_reversion.pdf")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
dev.off()
dev.off()
#plot
pdf(file="TC_variants_reversion.pdf")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
getwd()
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
#plot
pdf(file="TC_variants_reversion.pdf", height=10, width=20)
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
getwd()
dev.off()
#plot
pdf(file="TC_variants_reversion.pdf", height=10, width=20)
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=20, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
library(readxl)
variant_table_cleaned_combined <- read_excel("Dropbox/SARS-CoV-2-evolution/Pipeline results 1.8.21 (now including v2 samples)/variant_table_cleaned_combined.xlsx")
View(variant_table_cleaned_combined)
#load packages
library(tidyverse)
library(ggplot2)
#start with data frame of cleaned data, combined replicates
df <- as.data.frame(variant_table_cleaned_combined)
#make data long and skinny
df.long <- df %>%
pivot_longer(!c(variant,position,cds,N_or_S), names_to= "dataset", values_to ="frequency")
#make datasets a factor and set order
#actually seems like I need to set order within ggplot for some reason
factor(df.long$dataset, levels=c("SARS2_P1","SARS2_P2","SARS2_P3","C43","C56","C57","C58","C69","C70", "D46", "D47","D48", "F2678","H63","H65","H68"))
ggplot(df.long %>% filter(!is.na(frequency))) +
geom_point(aes(y=factor(dataset, levels = c("SARS2_P1","SARS2_P2","SARS2_P3","C43","C56","C57","C58","C69","C70", "D46", "D47","D48", "F2678","H63","H65","H68")),
x=position, fill=N_or_S), shape=21, size=2.5, alpha=0.8, stroke=FALSE)  +
geom_vline(xintercept=21563, size=0.5)+
geom_vline(xintercept=25384, size=0.5)+
scale_x_continuous(limits=c(0,30000)) +
theme_classic() +
theme(text = element_text(size=10, family="sans")) +
xlab ("Position in genome (nt)") +
ylab ("Dataset")
###mapping nonsynon vs. synon mutations, all mutations in spike are nonsynon
pdf(file="mapping_N_or_S_variants.pdf")
ggplot(df.long %>% filter(!is.na(frequency))) +
geom_point(aes(y=factor(dataset, levels = c("SARS2_P1","SARS2_P2","SARS2_P3","C43","C56","C57","C58","C69","C70", "D46", "D47","D48", "F2678","H63","H65","H68")),
x=position, fill=N_or_S), shape=21, size=2.5, alpha=0.8, stroke=FALSE)  +
geom_vline(xintercept=21563, size=0.5)+
geom_vline(xintercept=25384, size=0.5)+
scale_x_continuous(limits=c(0,30000)) +
theme_classic() +
theme(text = element_text(size=10, family="sans")) +
xlab ("Position in genome (nt)") +
ylab ("Dataset")
dev.off()
install.packages("egg", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
setwd("~/Documents/SARS2 Nov 2020-/coverage depth plot edits")
#load libraries
library(tidyverse)
library(openxlsx)
library(pdftools)
#load data, rename columns
depth_df <- read.delim("all.depth", sep="\t", header=FALSE)
colnames(depth_df) <- c("dataset", "virus", "position", "depth")
# rename datasets
source(paste0(r_bindir, "/process_dataset_names.R"))
depth_df <- process_dataset_names(depth_df)
# rename datasets
#source(paste0(r_bindir, "/process_dataset_names.R"))
depth_df <- process_dataset_names(depth_df)
View(depth_df)
# higlight coverage below a certain limit
# TODO: Parameterize this
min_depth_highlight <- 100
depth_df <- depth_df %>% mutate(above_highlight = if_else(depth > min_depth_highlight, TRUE, FALSE))
# max position for drawing a red rectangle showing low coverage
max_position = max(depth_df$position)
######### calculate average depth in windows
# %/% is the integer division operator
window_size = 10
depth_df <- depth_df %>% mutate (window = position %/% window_size)
# calculate average coverage depth in each window
df_windowed <- depth_df %>%
group_by(dataset, virus, window)  %>%
summarize(depth = mean(depth), .groups = "drop") %>%
mutate(position = (window*window_size) + 1) %>%
ungroup()
datasets <- depth_df %>% group_by(dataset) %>% summarize(.groups="drop") %>% pull()
plot_some_datasets <- function(datasets){
datasets_per_page <- 12
page_number <- 1
# iterate through the viruses, doing so many per page
for (i in seq(1, length(datasets), datasets_per_page)) {
# plots_per_page at a time
subset_datasets <- datasets[i:(i+(datasets_per_page-1))]
# output to console which ones we're doing
print(paste0(subset_datasets))
pdf_name <- paste0("coverage_plot_page_", page_number, ".pdf")
# generate & print plot
plot_datasets(subset_datasets, pdf_name)
page_number = page_number + 1
}
}
plot_datasets <- function(dataset_names, pdf_name){
# subset the main dataframes to get the data just for these viruses
subset_df <- df_windowed %>% filter(dataset %in% dataset_names)
# output the virus names to the console
print(paste0(dataset_names))
# p returned here is a ggplot object
p <- ggplot(subset_df) +
geom_line(aes(x=position, y=depth), size=0.5) +
geom_area(aes(x=position, y=depth), fill="lightgrey") +
annotate("rect", xmin=0, xmax=max_position, ymin=1, ymax=min_depth_highlight, alpha=0.05, fill="red") +
scale_color_manual(values = c("red", "black")) +
theme_bw(base_size = 10) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()) +
scale_y_log10() +
xlab("genome position (nt)") +
ylab (paste0("coverage depth\n", "coverage below ", min_depth_highlight, " in red"))+
facet_grid(dataset~virus, scales="free", space="free_x")
ggsave(pdf_name, p, height=10.5, width=7.5, units="in")
# print p will make the plots appear on viewer
# print(p)
}
plot_some_datasets(datasets)
pdf_combine(c(list.files(pattern="pdf$")), output="coverage_plot.pdf")
# calculated median depth of (total) coverage for each virus in each dataset and store it in a new df
median_depths <- depth_df %>% group_by(dataset, virus) %>% summarize(median_depth = median(depth))
depth_df %>%
summarize(median_depth = median(depth))
#load data, rename columns
depth_df <- read.delim("all.depth", sep="\t", header=FALSE)
#load data, rename columns
depth_df <- read.delim("all.depth", sep="\t", header=FALSE)
colnames(depth_df) <- c("dataset", "virus", "position", "depth")
# rename datasets
#source(paste0(r_bindir, "/process_dataset_names.R"))
depth_df <- process_dataset_names(depth_df)
# higlight coverage below a certain limit
# TODO: Parameterize this
min_depth_highlight <- 100
depth_df <- depth_df %>% mutate(above_highlight = if_else(depth > min_depth_highlight, TRUE, FALSE))
# max position for drawing a red rectangle showing low coverage
max_position = max(depth_df$position)
######### calculate average depth in windows
# %/% is the integer division operator
window_size = 10
depth_df <- depth_df %>% mutate (window = position %/% window_size)
# calculate average coverage depth in each window
df_windowed <- depth_df %>%
group_by(dataset, virus, window)  %>%
summarize(depth = mean(depth), .groups = "drop") %>%
mutate(position = (window*window_size) + 1) %>%
ungroup()
datasets <- depth_df %>% group_by(dataset) %>% summarize(.groups="drop") %>% pull()
plot_some_datasets <- function(datasets){
datasets_per_page <- 12
page_number <- 1
# iterate through the viruses, doing so many per page
for (i in seq(1, length(datasets), datasets_per_page)) {
# plots_per_page at a time
subset_datasets <- datasets[i:(i+(datasets_per_page-1))]
# output to console which ones we're doing
print(paste0(subset_datasets))
pdf_name <- paste0("coverage_plot_page_", page_number, ".pdf")
# generate & print plot
plot_datasets(subset_datasets, pdf_name)
page_number = page_number + 1
}
}
plot_datasets <- function(dataset_names, pdf_name){
# subset the main dataframes to get the data just for these viruses
subset_df <- df_windowed %>% filter(dataset %in% dataset_names)
# output the virus names to the console
print(paste0(dataset_names))
# p returned here is a ggplot object
p <- ggplot(subset_df) +
geom_line(aes(x=position, y=depth), size=0.5) +
geom_area(aes(x=position, y=depth), fill="lightgrey") +
annotate("rect", xmin=0, xmax=max_position, ymin=1, ymax=min_depth_highlight, alpha=0.05, fill="red") +
scale_color_manual(values = c("red", "black")) +
theme_bw(base_size = 10) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()) +
scale_y_log10() +
xlab("genome position (nt)") +
ylab (paste0("coverage depth\n", "coverage below ", min_depth_highlight, " in red"))+
facet_grid(dataset~virus, scales="free", space="free_x")
ggsave(pdf_name, p, height=10.5, width=7.5, units="in")
# print p will make the plots appear on viewer
# print(p)
}
plot_some_datasets(datasets)
pdf_combine(c(list.files(pattern="pdf$")), output="coverage_plot.pdf")
# calculated median depth of (total) coverage for each virus in each dataset and store it in a new df
median_depths <- depth_df %>%
group_by(dataset, virus) %>%
summarize(median_depth = median(depth))
median_depths_all_together <- depth_df %>%
summarize(median_depth = median(depth))
median_depth_all_together <- depth_df %>%
summarize(median_depth = median(depth))
wb <- createWorkbook("Median_depths.xlsx")
addWorksheet(wb, "median_depth")
addWorksheet(wb, "median_depth_all_together")
writeData(wb, "median_depth", median_depths)
writeData(wb, "median_depth_all_together", median_depth_all_together)
saveWorkbook(wb, "Median_depths.xlsx", overwrite = TRUE)
depth_df %>%
summarize(median_depth = median(depth))
setwd("~/Dropbox/SARS-CoV-2-evolution/Pipeline results 2.7.21/Pipeline raw output")
#load data, rename columns
depth_df <- read.delim("all.depth", sep="\t", header=FALSE)
library(tidyverse)
library(openxlsx)
library(pdftools)
colnames(depth_df) <- c("dataset", "virus", "position", "depth")
# rename datasets
#source(paste0(r_bindir, "/process_dataset_names.R"))
depth_df <- process_dataset_names(depth_df)
# higlight coverage below a certain limit
# TODO: Parameterize this
min_depth_highlight <- 100
depth_df <- depth_df %>% mutate(above_highlight = if_else(depth > min_depth_highlight, TRUE, FALSE))
# max position for drawing a red rectangle showing low coverage
max_position = max(depth_df$position)
######### calculate average depth in windows
# %/% is the integer division operator
window_size = 10
depth_df <- depth_df %>% mutate (window = position %/% window_size)
# calculate average coverage depth in each window
df_windowed <- depth_df %>%
group_by(dataset, virus, window)  %>%
summarize(depth = mean(depth), .groups = "drop") %>%
mutate(position = (window*window_size) + 1) %>%
ungroup()
datasets <- depth_df %>% group_by(dataset) %>% summarize(.groups="drop") %>% pull()
plot_some_datasets <- function(datasets){
datasets_per_page <- 12
page_number <- 1
# iterate through the viruses, doing so many per page
for (i in seq(1, length(datasets), datasets_per_page)) {
# plots_per_page at a time
subset_datasets <- datasets[i:(i+(datasets_per_page-1))]
# output to console which ones we're doing
print(paste0(subset_datasets))
pdf_name <- paste0("coverage_plot_page_", page_number, ".pdf")
# generate & print plot
plot_datasets(subset_datasets, pdf_name)
page_number = page_number + 1
}
}
plot_datasets <- function(dataset_names, pdf_name){
# subset the main dataframes to get the data just for these viruses
subset_df <- df_windowed %>% filter(dataset %in% dataset_names)
# output the virus names to the console
print(paste0(dataset_names))
# p returned here is a ggplot object
p <- ggplot(subset_df) +
geom_line(aes(x=position, y=depth), size=0.5) +
geom_area(aes(x=position, y=depth), fill="lightgrey") +
annotate("rect", xmin=0, xmax=max_position, ymin=1, ymax=min_depth_highlight, alpha=0.05, fill="red") +
scale_color_manual(values = c("red", "black")) +
theme_bw(base_size = 10) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank()) +
scale_y_log10() +
xlab("genome position (nt)") +
ylab (paste0("coverage depth\n", "coverage below ", min_depth_highlight, " in red"))+
facet_grid(dataset~virus, scales="free", space="free_x")
ggsave(pdf_name, p, height=10.5, width=7.5, units="in")
# print p will make the plots appear on viewer
# print(p)
}
# calculated median depth of (total) coverage for each virus in each dataset and store it in a new df
median_depths <- depth_df %>%
group_by(dataset, virus) %>%
summarize(median_depth = median(depth))
depth_df %>%
summarize(median_depth = median(depth))
mean_depth_all_together <- depth_df %>%
summarize(mean_depth = mean(depth))
wb <- createWorkbook("Median_depths.xlsx")
addWorksheet(wb, "median_depth")
addWorksheet(wb, "median_depth_all_together")
addWorksheet(wb, "mean_depth_all_together")
writeData(wb, "median_depth", median_depths)
writeData(wb, "median_depth_all_together", median_depth_all_together)
writeData(wb, "mean_depth_all_together", mean_depth_all_together)
saveWorkbook(wb, "Median_depths.xlsx", overwrite = TRUE)
View(mean_depth_all_together)
