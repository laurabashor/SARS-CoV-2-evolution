filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colors_manual(values=colors)+
facet_wrap(vars(variant)) +
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(Passage, values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
#plot
pdf(file="TC_variants_reversion.pdf")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
dev.off()
dev.off()
#plot
pdf(file="TC_variants_reversion.pdf")
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
getwd()
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
#plot
pdf(file="TC_variants_reversion.pdf", height=10, width=20)
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=10, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
getwd()
dev.off()
#plot
pdf(file="TC_variants_reversion.pdf", height=10, width=20)
ggplot(df3.long, aes(x=factor(Passage, levels = c("P1","P2","P3", "Cats", "Dogs","Hamsters","Ferret") ), y=Frequency, group=variant)) +
geom_point(show.legend=FALSE) +
geom_line(data=df3.long %>%
filter(Passage %in% c("P1","P2","P3")), show.legend=FALSE)+
scale_colour_manual(values=colors)+
facet_wrap(vars(variant)) +
theme_bw()+
theme(text = element_text(size=20, family="sans")) +
xlab ("Passage") +
ylab ("Variant Frequency")
dev.off()
library(readxl)
variant_table_cleaned_combined <- read_excel("Dropbox/SARS-CoV-2-evolution/Pipeline results 1.8.21 (now including v2 samples)/variant_table_cleaned_combined.xlsx")
View(variant_table_cleaned_combined)
#load packages
library(tidyverse)
library(ggplot2)
#start with data frame of cleaned data, combined replicates
df <- as.data.frame(variant_table_cleaned_combined)
#make data long and skinny
df.long <- df %>%
pivot_longer(!c(variant,position,cds,N_or_S), names_to= "dataset", values_to ="frequency")
#make datasets a factor and set order
#actually seems like I need to set order within ggplot for some reason
factor(df.long$dataset, levels=c("SARS2_P1","SARS2_P2","SARS2_P3","C43","C56","C57","C58","C69","C70", "D46", "D47","D48", "F2678","H63","H65","H68"))
ggplot(df.long %>% filter(!is.na(frequency))) +
geom_point(aes(y=factor(dataset, levels = c("SARS2_P1","SARS2_P2","SARS2_P3","C43","C56","C57","C58","C69","C70", "D46", "D47","D48", "F2678","H63","H65","H68")),
x=position, fill=N_or_S), shape=21, size=2.5, alpha=0.8, stroke=FALSE)  +
geom_vline(xintercept=21563, size=0.5)+
geom_vline(xintercept=25384, size=0.5)+
scale_x_continuous(limits=c(0,30000)) +
theme_classic() +
theme(text = element_text(size=10, family="sans")) +
xlab ("Position in genome (nt)") +
ylab ("Dataset")
###mapping nonsynon vs. synon mutations, all mutations in spike are nonsynon
pdf(file="mapping_N_or_S_variants.pdf")
ggplot(df.long %>% filter(!is.na(frequency))) +
geom_point(aes(y=factor(dataset, levels = c("SARS2_P1","SARS2_P2","SARS2_P3","C43","C56","C57","C58","C69","C70", "D46", "D47","D48", "F2678","H63","H65","H68")),
x=position, fill=N_or_S), shape=21, size=2.5, alpha=0.8, stroke=FALSE)  +
geom_vline(xintercept=21563, size=0.5)+
geom_vline(xintercept=25384, size=0.5)+
scale_x_continuous(limits=c(0,30000)) +
theme_classic() +
theme(text = element_text(size=10, family="sans")) +
xlab ("Position in genome (nt)") +
ylab ("Dataset")
dev.off()
install.packages("egg", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
setwd("~/Dropbox/SARS-CoV-2-evolution/Pipeline results 2.7.21/0.001 (0.1%) cutoff")
#load libraries
library(tidyverse)
library(openxlsx)
library(readxl)
#raw output of pipeline is variant_summary.xlsx
#save as .csv
#import variant table.csv
df <- read.csv("variant_summary_0.001_cutoff.csv")
#make data long and skinny
#names(df)
df2 <- df %>%
pivot_longer(!c(reference_sequence, position, gene, indel,variant, reference_base, variant_base, effect),
names_to= "dataset_ID",
values_to ="frequency")
View(df)
#make data long and skinny
#names(df)
df2 <- df %>%
pivot_longer(!c(reference_sequence, position, gene, codon,indel,variant, reference_base, variant_base, effect),
names_to= "dataset_ID",
values_to ="frequency")
View(df)
#make data long and skinny
#names(df)
df2 <- df %>%
pivot_longer(!c(reference_sequence, position, gene, codon,indel,variant, reference_base, variant_base, effect,featureid),
names_to= "dataset_ID",
values_to ="frequency")
View(df2)
#make a new column labeling replicates (anything with _R is replicate 2, without it gets a 1)
df2$replicate = str_extract(df2$dataset_ID, "_R")
df2$replicate[is.na(df2$replicate)] <- 1
df2$replicate[df2$replicate == "_R"] <- 2
#right now, there is a 0 if we didn't detect the variant at >3% frequency, and an NA if we didn't have enough read coverage to know if we actually didn't detect it, or it didn't show up due to low coverage
#for the purpose of combining replicates, we will treat the 0s and NAs the same, as NA
df2[df2 == "0"] <- NA
#rename df to df.all before sorting variants by species
df.all <- df
#for our final excel spreadsheet, it will be nice to be able to look at species separately
#subset into data frames for each animal
df.cats <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("C"))
df.dogs <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("D"))
df.hamsters <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("H"))
df.ferrets <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("F"))
df.inoc <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("P"))
#use a function to delete any rows in which there are NAs for all cats
delete.na <- function(df.cats, n=0) {
df.cats[rowSums(is.na(df.cats)) <= n,]
}
df.cats <- delete.na(df.cats,5) #5 is max NAs allowed for 6 cats
# #do it for dogs
delete.na.dogs <- function(df.dogs, n=0) {
df.dogs[rowSums(is.na(df.dogs)) <= n,]
}
df.dogs <- delete.na.dogs(df.dogs, 2) #2 is max NAs allowed for 3 dogs
#do it for hamsters
delete.na.ham <- function(df.hamsters, n=0) {
df.hamsters[rowSums(is.na(df.hamsters)) <= n,]
}
df.hamsters <- delete.na.ham(df.hamsters, 2) #2 is max NAs allowed for 3 hamsters
#and do it for inoculums
delete.na.inoc <- function(df.inoc, n=0) {
df.inoc[rowSums(is.na(df.inoc)) <= n,]
}
df.inoc <- delete.na.inoc(df.inoc, 2) #2 is max NAs allowed for 3 passages
#no NAs wanted at all for ferrets
df.ferrets <- na.omit(df.ferrets)
##now filter for variants that were not detected in the inoculum viral stock across the three passages
#filter to keep all data where Passage 1, 2 and 3 viral stock columns have NAs, and name this df.all
df.filtered <-
df.all %>%
filter_at(vars(starts_with("Passage")), all_vars(is.na(.)))
wb <- createWorkbook("variant_0.001_processed.xlsx")
addWorksheet(wb, "all")
addWorksheet(wb, "cats")
addWorksheet(wb, "dogs")
addWorksheet(wb, "hamsters")
addWorksheet(wb, "ferrets")
addWorksheet(wb, "inoculum")
addWorksheet(wb, "not_in_inoculum")
writeData(wb, "all", df_wide,borders="all")
writeData(wb, "cats", df.cats,borders="all")
writeData(wb, "dogs", df.dogs,borders="all")
writeData(wb, "hamsters", df.hamsters,borders="all")
writeData(wb, "ferrets", df.ferrets,borders="all")
writeData(wb, "inoculum", df.inoc, borders="all")
writeData(wb, "not_in_inoculum", df.filtered,borders="all")
saveWorkbook(wb, "variant_0.001_processed.xlsx", overwrite = TRUE)
wb <- createWorkbook("variant_0.001_processed.xlsx")
addWorksheet(wb, "all")
addWorksheet(wb, "cats")
addWorksheet(wb, "dogs")
addWorksheet(wb, "hamsters")
addWorksheet(wb, "ferrets")
addWorksheet(wb, "inoculum")
addWorksheet(wb, "not_in_inoculum")
writeData(wb, "all", df.all,borders="all")
writeData(wb, "cats", df.cats,borders="all")
writeData(wb, "dogs", df.dogs,borders="all")
writeData(wb, "hamsters", df.hamsters,borders="all")
writeData(wb, "ferrets", df.ferrets,borders="all")
writeData(wb, "inoculum", df.inoc, borders="all")
writeData(wb, "not_in_inoculum", df.filtered,borders="all")
saveWorkbook(wb, "variant_0.001_processed.xlsx", overwrite = TRUE)
View(df2)
#right now, there is a 0 if we didn't detect the variant at >3% frequency, and an NA if we didn't have enough read coverage to know if we actually didn't detect it, or it didn't show up due to low coverage
#for the purpose of combining replicates, we will treat the 0s and NAs the same, as NA
#df2[df2 == "0"] <- NA
df[df == "0"] <- NA
#rename df to df.all before sorting variants by species
df.all <- df
df.cats <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("C"))
df.dogs <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("D"))
df.hamsters <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("H"))
df.ferrets <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("F"))
df.inoc <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("P"))
#use a function to delete any rows in which there are NAs for all cats
delete.na <- function(df.cats, n=0) {
df.cats[rowSums(is.na(df.cats)) <= n,]
}
df.cats <- delete.na(df.cats,5) #5 is max NAs allowed for 6 cats
# #do it for dogs
delete.na.dogs <- function(df.dogs, n=0) {
df.dogs[rowSums(is.na(df.dogs)) <= n,]
}
df.dogs <- delete.na.dogs(df.dogs, 2) #2 is max NAs allowed for 3 dogs
#do it for hamsters
delete.na.ham <- function(df.hamsters, n=0) {
df.hamsters[rowSums(is.na(df.hamsters)) <= n,]
}
df.hamsters <- delete.na.ham(df.hamsters, 2) #2 is max NAs allowed for 3 hamsters
#and do it for inoculums
delete.na.inoc <- function(df.inoc, n=0) {
df.inoc[rowSums(is.na(df.inoc)) <= n,]
}
df.inoc <- delete.na.inoc(df.inoc, 2) #2 is max NAs allowed for 3 passages
#no NAs wanted at all for ferrets
df.ferrets <- na.omit(df.ferrets)
##now filter for variants that were not detected in the inoculum viral stock across the three passages
#filter to keep all data where Passage 1, 2 and 3 viral stock columns have NAs, and name this df.all
df.filtered <-
df.all %>%
filter_at(vars(starts_with("Passage")), all_vars(is.na(.)))
#save variant table as excel sheet, with sheets for each species
wb <- createWorkbook("variant_0.001_processed.xlsx")
addWorksheet(wb, "all")
addWorksheet(wb, "cats")
addWorksheet(wb, "dogs")
addWorksheet(wb, "hamsters")
addWorksheet(wb, "ferrets")
addWorksheet(wb, "inoculum")
addWorksheet(wb, "not_in_inoculum")
writeData(wb, "all", df.all,borders="all")
writeData(wb, "cats", df.cats,borders="all")
writeData(wb, "dogs", df.dogs,borders="all")
writeData(wb, "hamsters", df.hamsters,borders="all")
writeData(wb, "ferrets", df.ferrets,borders="all")
writeData(wb, "inoculum", df.inoc, borders="all")
writeData(wb, "not_in_inoculum", df.filtered,borders="all")
saveWorkbook(wb, "variant_0.001_processed.xlsx", overwrite = TRUE)
#import variant table.csv
df <- read.csv("variant_summary_0.001_cutoff.csv")
#make zeros NAs
df <- df[df == "0"] <- NA
#import variant table.csv
df <- read.csv("variant_summary_0.001_cutoff.csv")
#make zeros NAs
df[df == "0"] <- NA
View(df)
#make a data frame with just variants that were present in the inoculum
df.inoc <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("P"))
#make a data frame with just variants that were present in the inoculum
df.inoc <- df %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("P"))
View(df.inoc)
delete.na.inoc <- function(df.inoc, n=0) {
df.inoc[rowSums(is.na(df.inoc)) <= n,]
}
df.inoc <- delete.na.inoc(df.inoc, 5) #5 is max NAs allowed for 3 passages x 2 replicates
View(df.inoc)
df.not <- read.csv("not_in_inoculum.csv")
View(df.not)
anti_join(df.inoc, df.not)
View(df)
View(df.inoc)
View(df.not)
#compare df.not to df.inoc
#for some reason df.not has indel as a boolean data type
as.character(df.not$indel)
anti_join(df.inoc, df.not)
View(df.inoc)
View(df.not)
#compare df.not to df.inoc
#for some reason R doesn't like the indel column
df.not %>%
select(-indel)
#compare df.not to df.inoc
#for some reason R doesn't like the indel column
df.not <- df.not %>%
select(-indel)
View(df.not)
##compare df.not to df.inoc
anti_join(df.inoc, df.not)
##compare df.not to df.inoc
anti <- anti_join(df.inoc, df.not)
View(anti)
##compare df.not to df.inoc
anti <- anti_join(df.inoc, df.not, by="variant")
View(anti)
##compare df.not to df.inoc
anti <- anti_join(df.not, df.inoc, by="variant")
View(anti)
##compare df.not to df.inoc
anti <- anti_join(df.not, df.inoc, by="variant", copy=TRUE)
View(anti)
##compare df.not to df.inoc
anti <- anti_join(df.not, df.inoc, by="variant")
View(anti)
View(df.inoc)
View(df.inoc)
wb <- createWorkbook("not in inoculum above 0.1%.xlsx")
addWorksheet(wb, not_in_inoculum_0.001)
addWorksheet(wb, "not_in_inoculum_0.001")
writeData(wb, "not_in_inoculum_0.001", anti, borders="all")
library(openxlsx)
library(readxl)
wb <- createWorkbook("not in inoculum above 0.1%.xlsx")
addWorksheet(wb, "not_in_inoculum_0.001")
writeData(wb, "not_in_inoculum_0.001", anti, borders="all")
wb <- createWorkbook("not in inoculum above 0.1%.xlsx")
addWorksheet(wb, "not_in_inoculum_0.001")
writeData(wb, "not_in_inoculum_0.001", anti, borders="all")
saveWorkbook(wb, "not in inoculum above 0.1%.xlsx", overwrite=TRUE)
View(anti)
df.all <- anti
df.all <- anti
df.cats <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("C"))
df.dogs <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("D"))
df.hamsters <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect, starts_with("H"))
df.ferrets <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("F"))
df.inoc <- df.all %>%
select(reference_sequence,position, gene, indel,variant, reference_base, variant_base, effect,starts_with("P"))
#use a function to delete any rows in which there are NAs for all cats
delete.na <- function(df.cats, n=0) {
df.cats[rowSums(is.na(df.cats)) <= n,]
}
df.cats <- delete.na(df.cats,5) #5 is max NAs allowed for 6 cats
# #do it for dogs
delete.na.dogs <- function(df.dogs, n=0) {
df.dogs[rowSums(is.na(df.dogs)) <= n,]
}
df.dogs <- delete.na.dogs(df.dogs, 2) #2 is max NAs allowed for 3 dogs
#do it for hamsters
delete.na.ham <- function(df.hamsters, n=0) {
df.hamsters[rowSums(is.na(df.hamsters)) <= n,]
}
df.hamsters <- delete.na.ham(df.hamsters, 2) #2 is max NAs allowed for 3 hamsters
#and do it for inoculums
delete.na.inoc <- function(df.inoc, n=0) {
df.inoc[rowSums(is.na(df.inoc)) <= n,]
}
df.inoc <- delete.na.inoc(df.inoc, 2) #2 is max NAs allowed for 3 passages
#no NAs wanted at all for ferrets
df.ferrets <- na.omit(df.ferrets)
df.cats <- df.all %>%
select(reference_sequence,position, gene, variant, reference_base, variant_base, effect, starts_with("C"))
df.dogs <- df.all %>%
select(reference_sequence,position, gene,variant, reference_base, variant_base, effect, starts_with("D"))
df.hamsters <- df.all %>%
select(reference_sequence,position, gene, variant, reference_base, variant_base, effect, starts_with("H"))
df.ferrets <- df.all %>%
select(reference_sequence,position, gene, variant, reference_base, variant_base, effect,starts_with("F"))
df.inoc <- df.all %>%
select(reference_sequence,position, gene, variant, reference_base, variant_base, effect,starts_with("P"))
#use a function to delete any rows in which there are NAs for all cats
delete.na <- function(df.cats, n=0) {
df.cats[rowSums(is.na(df.cats)) <= n,]
}
df.cats <- delete.na(df.cats,5) #5 is max NAs allowed for 6 cats
# #do it for dogs
delete.na.dogs <- function(df.dogs, n=0) {
df.dogs[rowSums(is.na(df.dogs)) <= n,]
}
df.dogs <- delete.na.dogs(df.dogs, 2) #2 is max NAs allowed for 3 dogs
#do it for hamsters
delete.na.ham <- function(df.hamsters, n=0) {
df.hamsters[rowSums(is.na(df.hamsters)) <= n,]
}
df.hamsters <- delete.na.ham(df.hamsters, 2) #2 is max NAs allowed for 3 hamsters
#and do it for inoculums
delete.na.inoc <- function(df.inoc, n=0) {
df.inoc[rowSums(is.na(df.inoc)) <= n,]
}
df.inoc <- delete.na.inoc(df.inoc, 2) #2 is max NAs allowed for 3 passages
#no NAs wanted at all for ferrets
df.ferrets <- na.omit(df.ferrets)
View(df.cats)
#now let's filter down to remake Table 2
anti_long <- anti %>%
pivot_longer((!c(reference_sequence, position, gene,variant, reference_base, variant_base, effect),
names_to= "dataset_ID",
values_to ="frequency"))
#now let's filter down to remake Table 2
anti_long <- anti %>%
pivot_longer(!c(reference_sequence, position, gene,variant, reference_base, variant_base, effect),
names_to= "dataset_ID",
values_to ="frequency")
anti0.5 <- anti_long %>%
filter(frequency >= 0.5)
View(anti0.5)
df.cats <- na.omit(df.cats)
View(df.cats)
df.dogs <- na.omit(df.dogs)
View(df.dogs)
df.dogs <- df.all %>%
select(reference_sequence,position, gene,variant, reference_base, variant_base, effect, starts_with("D"))
View(df.dogs)
df.hamsters <- na.omit(df.hamsters)
.
#now get dfs with only variants present in every single individual of a species
df.cats <- na.omit(df.cats)
df.dogs <- na.omit(df.dogs)
df.hamsters <- na.omit(df.hamsters)
table2 <- anti0.5 %>%
pivot_wider(id_cols = c(reference_sequence, position, gene, variant, reference_base, variant_base, effect),
names_from=dataset_ID,
values_from=c(mean),
names_sort = T)
table2 <- anti0.5 %>%
pivot_wider(id_cols = c(reference_sequence, position, gene, variant, reference_base, variant_base, effect),
names_from=dataset_ID,
values_from=c(frequency),
names_sort = T)
View(table2)
#save as an excel workbook
wb <- createWorkbook("not in inoculum above 0.1%.xlsx")
addWorksheet(wb, "not_in_inoculum_0.001")
addWorksheet(wb, "not_in_inoculum_0.001_table2")
writeData(wb, "not_in_inoculum_0.001", anti, borders="all")
writeData(wb, "not_in_inoculum_0.001_table2", anti0.5, borders="all")
saveWorkbook(wb, "not in inoculum above 0.1%.xlsx", overwrite=TRUE)
View(anti0.5)
table2 <- anti0.5 %>%
pivot_wider(id_cols = c(reference_sequence, position, gene, variant, reference_base, variant_base, effect),
names_from=dataset_ID,
values_from=c(frequency),
names_sort = T)
View(table2)
#save as an excel workbook
wb <- createWorkbook("not in inoculum above 0.1%.xlsx")
addWorksheet(wb, "not_in_inoculum_0.001")
addWorksheet(wb, "not_in_inoculum_0.001_table2")
writeData(wb, "not_in_inoculum_0.001", anti, borders="all")
writeData(wb, "not_in_inoculum_0.001_table2", table2, borders="all")
saveWorkbook(wb, "not in inoculum above 0.1%.xlsx", overwrite=TRUE)
